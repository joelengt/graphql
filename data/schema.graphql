schema {
  query: RootQuery
}

type Address implements Node {
  # The ID of an object
  id: ID!
  user: User
  district: District
  address: String
  deliveryAddress: String
  billAddress: String
  reference: String
  name: String
}

type Ads implements Node {
  # The ID of an object
  id: ID!
  name: String
  photo: String
  link: String
  isArchived: Boolean
}

type AdsConnection {
  edges: [AdsEdge]
  pageInfo: PageInfo
}

type AdsEdge {
  node: Ads
}

type Brand implements Node {
  # The ID of an object
  id: ID!
  company: Company
  name: String
  nameSlugify: String
  photo: String
  description: String
  seoDescription: String
  isFeatured: Boolean
  isArchived: Boolean
}

type BrandConnection {
  edges: [BrandEdge]
  pageInfo: PageInfo
}

type BrandEdge {
  node: Brand
}

type BusinessType {
  id: ID
  meta: String
  name: String
}

type Cart implements Node {
  # The ID of an object
  id: ID!
  items: [CartProduct]
  quantity: Int
  prices: CartPrices
}

type CartPrices implements Node {
  # The ID of an object
  id: ID!
  subTotal: Float
  _subTotal: String
  igv: Float
  _igv: String
  total: Float
  _total: String
  minimumOrder: Float
  _minimumOrder: String
}

type CartProduct implements Node {
  # The ID of an object
  id: ID!
  brand: Brand
  sku: String
  name: String
  nameSlugify: String
  photo: String
  presentation: String
  description: String
  seoDescription: String
  timeLife: String
  offer: Float
  price: Float
  _price: String
  unitPrice: Float
  _unitPrice: String
  suggestedPrice: Float
  stock: Int
  popularity: Int
  order: Int
  needPerception: Boolean
  isAlwaysInStock: Boolean
  quantity: Int
  categories: [Category]
  isFeatured: Boolean
  isArchived: Boolean
}

type Category implements Node {
  # The ID of an object
  id: ID!
  name: String
  nameSlugify: String
  photo: String
  description: String
  level: Int
  isFeatured: Boolean
  parentId: Int
  iArchived: Boolean
  parentCategories: [Category]
  subCategories: [Category]
}

type CategoryConnection {
  edges: [CategoryEdge]
  pageInfo: PageInfo
}

type CategoryEdge {
  node: Category
}

type Company implements Node {
  # The ID of an object
  id: ID!
  name: String
}

scalar Date

type District implements Node {
  # The ID of an object
  id: ID!
  name: String
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type PageInfo {
  count: Int
  pages: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
}

type Partner implements Node {
  # The ID of an object
  id: ID!
  name: String
  nameSlugify: String
  logo: String
  color: String
  minimunPurchase: Float
  deliveryMessage: String
  ads: [Ads]
  isFeatured: Boolean
  products: [Product]
  orders: [Purchase]
  carts: [Cart]
}

type PaymentMethod implements Node {
  # The ID of an object
  id: ID!
  meta: String
  name: String
}

type Product implements Node {
  # The ID of an object
  id: ID!
  brand: Brand
  sku: String
  name: String
  nameSlugify: String
  photo: String
  presentation: String
  description: String
  seoDescription: String
  timeLife: String
  offer: Float
  _offer: String
  price: Float
  _price: String
  unitPrice: Float
  _unitPrice: String
  suggestedPrice: Float
  stock: Int
  popularity: Int
  quantity: Int
  order: Int
  needPerception: Boolean
  isAlwaysInStock: Boolean
  categories: [Category]
  isFeatured: Boolean
  isArchived: Boolean
}

type ProductConnection {
  edges: [ProductEdge]
  pageInfo: PageInfo
}

type ProductEdge {
  node: Product
}

type Purchase implements Node {
  # The ID of an object
  id: ID!
  _id: ID
  user: User
  status: PurchaseStatus
  code: String
  subTotal: Float
  igv: Float
  total: Float
  paymentCost: Float
  shippingCost: Float
  _subTotal: String
  _igv: String
  _total: String
  _paymentCost: String
  _shippingCost: String
  receipt: ReceiptType
  ruc: String
  fiscal_name: String
  fiscalAddress: String
  dni: String
  deliveryAddress: String
  reference: String
  createdAt: Date
  deliveryAt: Date
  _createdAt: String
  _deliveryAt: String
  district: District
  payment: PaymentMethod
  items: [PurchaseItem]
  billDoc: String
  billAddress: String
  guideDoc: String
}

type PurchaseItem {
  id: ID
  product_id: ID
  product: Product
  name: String
  presentation: String
  photo: String
  quantity: Int
  price: Float
  _price: String
  offer: Float
  _offer: String
}

type PurchaseStatus {
  id: ID
  meta: String
  name: String
  color: String
}

type ReceiptType {
  id: ID
  meta: String
  name: String
}

type RootQuery {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  # Cart
  cart: Cart

  # categories
  categories(limit: Int, page: Int): CategoryConnection

  # products
  products(limit: Int, page: Int): ProductConnection

  # brands
  brands(limit: Int, page: Int): BrandConnection

  # ads
  ads(limit: Int, page: Int): AdsConnection

  # business partner
  partner: Partner

  # search
  search: Search
}

type Search implements Node {
  # The ID of an object
  id: ID!
  categories: Category
  products: [Product]
}

type User implements Node {
  # The ID of an object
  id: ID!
  _id: ID
  businessType: BusinessType
  is_new_buyer: Boolean
  name: String
  last_name: String
  full_name: String
  photo: String
  email: String
  phone: String
  business_name: String
  fiscal_name: String
  fiscal_address: String
  ruc: String
  dni: String
  provider: String
  onboard_finished: Boolean
  is_admin: Boolean
  is_active: Boolean
  is_email_verified: Boolean
  is_archived: Boolean
  created_at: Float
  updated_at: Float
  archived_at: Float
  address: Address
  orders: [Purchase]
  user_type: UserType
}

type UserType implements Node {
  # The ID of an object
  id: ID!
  name: String
}
